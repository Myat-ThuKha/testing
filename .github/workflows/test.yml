name: "integration-tests"

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  integration-tests:
    runs-on: ubuntu-24.04
    container: cgr.dev/chainguard/go:latest

    env:
      MONGO_URI: mongodb://mongodb:27017/test?replicaSet=rs0
      ELASTIC_URI: http://elasticsearch:9200

    services:
        mongodb:
          image: mongo:7.0
          ports:
            - 27017:27017
          options: >-
            --health-cmd="echo 'db.runCommand({ ping: 1 })' | mongosh localhost:27017/test --quiet"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
            --entrypoint """


        elasticsearch:
            image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
            ports:
            - 9800:9200
            options: --health-cmd="curl http://localhost:9200/_cluster/health" -e "discovery.type=single-node" -e "xpack.security.enabled=false"

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      
      - name: Install mongosh
        run: |
          sudo apt-get install gnupg
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      - name: Initialize MongoDB Replica Set
        run: |
          mongosh --host localhost:27017 --eval '
            rs.initiate({
              _id: "rs0",
              members: [ { _id: 0, host: "localhost:27017" } ]
            })

      - name: Download dependencies
        run: go mod download

      - name: Run Integration Tests
        run: go test -v ./...